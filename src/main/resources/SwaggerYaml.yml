swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
    For this sample, you can use the api key `special-key` to test the authorization
    filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
    - name: "student"
      description: "Everything about your student"
    - name: "book"
      description: "Everything about your book"
schemes:
- "http"
paths:
    /student:
      post:
        tags:
        - "student"
        summary: "Add a new student object"
        description: ""
        operationId: "addstudent"
        consumes:
        - "application/json"
        - "application/xml"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
    /student/{ name }:
    get:
      tags:
      - "student"
      summary: "Find student by name"
      description: "Returns a single student"
      operationId: "getstudentByname"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "ID of student to return"
        required: true
        type: "String"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/student"
        400:
          description: "Invalid name supplied"
        404:
          description: "student not found"
      security:
      - api_key: []
    delete:
      tags:
        - "student"
        summary: "Deletes a student"
        description: ""
        operationId: "deletestudent"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "name"
          in: "path"
          description: "Pet student to delete"
          required: true
          type: "String"
          format: "int64""
        responses:
          400:
            description: "Invalid studentvalue"
        security:
          - petstore_auth:
          - "write:pets"
          - "read:pets"
    /book:
      post:
        tags:
        - "book"
        summary: "Add a new book object"
        description: ""
        operationId: "addbook"
        consumes:
        - "application/json"
        - "application/xml"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
    /book/{ name }:
    get:
      tags:
      - "book"
      summary: "Find book by name"
      description: "Returns a single book"
      operationId: "getbookByname"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "String"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/book"
        400:
          description: "Invalid name supplied"
        404:
          description: "book not found"
      security:
      - api_key: []
    delete:
      tags:
        - "book"
        summary: "Deletes a book"
        description: ""
        operationId: "deletebook"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "name"
          in: "path"
          description: "Pet book to delete"
          required: true
          type: "String"
          format: "int64""
        responses:
          400:
            description: "Invalid bookvalue"
        security:
          - petstore_auth:
          - "write:pets"
          - "read:pets"
definitions:
  student:
    type: "object"
    required:
    - "name"
    - "Id"
    properties:
      name:
        type: "String"
        format: "int64"
      Id:
        type: "int"
        format: "int64"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "student status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "student"
  book:
    type: "object"
    required:
    - "name"
    - "price"
    properties:
      name:
        type: "String"
        format: "int64"
      price:
        type: "Float"
        format: "int64"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "book status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "book"



<!--    Tag:-->
<!--    type: "object"-->
<!--    properties:-->
<!--  -->
<!--     student: -->
<!--     Properties: -->
<!--      -->
<!--         name -->
<!--         String -->
<!--      -->
<!--          -->
<!--          -->
<!--      -->
<!--  -->
<!--     book: -->
<!--     Properties: -->
<!--      -->
<!--         name -->
<!--         String -->
<!--      -->
<!--          -->
<!--          -->
<!--      -->
<!--  -->