swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
    For this sample, you can use the api key `special-key` to test the authorization
    filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
    - name: student
      description: "Everything about your student"
    - name: book
      description: "Everything about your book"
schemes:
- "http"
paths:
   /student:
     post:
       tags:
       - "student"
       summary: "Add a new student object"
       description: ""
       operationId: "addstudent"
       consumes:
       - "application/json"
       - "application/xml"
       produces:
       - "application/xml"
       - "application/json"
       parameters:
       - in: "body"
         name: "body"
         description: "Pet object that needs to be added to the store"
         required: true
         schema:
           $ref: "#/definitions/student"
       responses:
         405:
          description: "Invalid input"
   /student/{studentId}:
     get:
       tags:
       - "student"
       summary: "Find student by studentId"
       description: "Returns a single student"
       operationId: "getstudentBystudentId"
       produces:
       - "application/xml"
       - "application/json"
       parameters:
       - name: "studentId"
         in: "path"
         description: "ID of student to return"
         required: true
         type: "string"
         format: "int64"
       responses:
         200:
           description: "successful operation"
           schema:
             $ref: "#/definitions/student"
         400:
           description: "Invalid studentId supplied"
         404:
           description: "student not found"
     delete:
       tags:
       - "student"
       summary: "Deletes a student"
       description: ""
       operationId: "deletestudent"
       produces:
       - "application/xml"
       - "application/json"
       parameters:
       - name: "studentId"
         in: "path"
         description: "Pet student to delete"
         required: true
         type: "string"
         format: "int64"
       responses:
         400:
           description: "Invalid studentvalue"
   /book:
     post:
       tags:
       - "book"
       summary: "Add a new book object"
       description: ""
       operationId: "addbook"
       consumes:
       - "application/json"
       - "application/xml"
       produces:
       - "application/xml"
       - "application/json"
       parameters:
       - in: "body"
         name: "body"
         description: "Pet object that needs to be added to the store"
         required: true
         schema:
           $ref: "#/definitions/book"
       responses:
         405:
          description: "Invalid input"
   /book/{bookId}:
     get:
       tags:
       - "book"
       summary: "Find book by bookId"
       description: "Returns a single book"
       operationId: "getbookBybookId"
       produces:
       - "application/xml"
       - "application/json"
       parameters:
       - name: "bookId"
         in: "path"
         description: "ID of book to return"
         required: true
         type: "string"
         format: "int64"
       responses:
         200:
           description: "successful operation"
           schema:
             $ref: "#/definitions/book"
         400:
           description: "Invalid bookId supplied"
         404:
           description: "book not found"
     delete:
       tags:
       - "book"
       summary: "Deletes a book"
       description: ""
       operationId: "deletebook"
       produces:
       - "application/xml"
       - "application/json"
       parameters:
       - name: "bookId"
         in: "path"
         description: "Pet book to delete"
         required: true
         type: "string"
         format: "int64"
       responses:
         400:
           description: "Invalid bookvalue"
definitions:
  student:
    type: "object"
    required:
    - "studentId"
    - "Id"
    properties:
      studentId:
        type: "string"
        format: "int64"
      Id:
        type: "integer"
        format: "int64"
    xml:
      name: "student"
  book:
    type: "object"
    required:
    - "bookId"
    - "price"
    properties:
      bookId:
        type: "string"
        format: "int64"
      price:
        type: "integer"
        format: "int64"
    xml:
      name: "book"



<!--    Tag:-->
<!--    type: "object"-->
<!--    properties:-->
<!--  -->
<!--     student: -->
<!--     Properties: -->
<!--      -->
<!--         studentId -->
<!--         string -->
<!--      -->
<!--          -->
<!--          -->
<!--      -->
<!--  -->
<!--     book: -->
<!--     Properties: -->
<!--      -->
<!--         bookId -->
<!--         string -->
<!--      -->
<!--          -->
<!--          -->
<!--      -->
<!--  -->